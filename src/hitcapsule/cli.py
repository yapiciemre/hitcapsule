from __future__ import annotations
import argparse
import csv
import logging
from datetime import datetime
from typing import List

from .billboard import fetch_hot100, ChartEntry
from .spotify_client import SpotifyClient


def _setup_logging(verbose: bool) -> None:
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=level,
        format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
    )


def _valid_date(text: str) -> str:
    try:
        datetime.strptime(text, "%Y-%m-%d")
        return text
    except ValueError:
        raise argparse.ArgumentTypeError("Tarih formatı YYYY-MM-DD olmalı.")


def main(argv: List[str] | None = None) -> None:
    parser = argparse.ArgumentParser(
        prog="hitcapsule",
        description="Create a Spotify playlist from Billboard Hot 100 for a given date.",
    )
    parser.add_argument(
        "--date", "-d", type=_valid_date, required=False,
        help="Target chart date in YYYY-MM-DD (Billboard Hot 100)."
    )
    parser.add_argument(
        "--name", "-n", default=None,
        help="Playlist name (default: '<date> Billboard Hot 100')."
    )
    parser.add_argument(
        "--public", action="store_true",
        help="Create a public playlist (default: private)."
    )
    parser.add_argument(
        "--verbose", "-v", action="store_true", help="Verbose logging."
    )
    args = parser.parse_args(argv)

    # Logging
    _setup_logging(args.verbose)

    # Date: parametre verilmediyse konsolda sor
    date = args.date
    if not date:
        date = _valid_date(input("Enter date (YYYY-MM-DD): ").strip())
    year = date.split("-")[0]
    playlist_name = args.name or f"{date} Billboard Hot 100"

    logging.info("Fetching Billboard Hot 100 for %s…", date)
    chart = fetch_hot100(date)
    logging.info("Found %d entries", len(chart))

    sp = SpotifyClient()
    uris: List[str] = []
    missing: List[ChartEntry] = []

    for e in chart:
        uri = sp.search_best_track(e.title, e.artist, year)
        if uri:
            uris.append(uri)
            logging.debug("Matched: #%d %s — %s", e.rank, e.title, e.artist)
        else:
            missing.append(e)
            logging.debug("Not found: #%d %s — %s", e.rank, e.title, e.artist)

    desc = f"Billboard Hot 100 - {date}. Generated by hitcapsule."
    playlist_id = sp.create_playlist(playlist_name, public=args.public, description=desc)
    sp.add_items_chunked(playlist_id, uris)

    logging.info("Added %d tracks to playlist '%s'", len(uris), playlist_name)

    if missing:
        path = f"missing_{date}.csv"
        with open(path, "w", newline="", encoding="utf-8") as f:
            w = csv.writer(f)
            w.writerow(["rank", "title", "artist"])
            for m in missing:
                w.writerow([m.rank, m.title, m.artist])
        logging.info("Missing %d tracks. Report saved: %s", len(missing), path)


if __name__ == "__main__":
    main()
