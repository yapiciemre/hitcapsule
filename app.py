import os, sys, time
from datetime import date as _date

# src yolunu ekle ki import çalışsın
BASE = os.path.dirname(__file__)
SRC = os.path.join(BASE, "src")
if SRC not in sys.path:
    sys.path.insert(0, SRC)

import streamlit as st
from hitcapsule.billboard import fetch_hot100
from hitcapsule.spotify_client import SpotifyClient
from hitcapsule.artwork import make_cover, make_story_poster

# ---- Sayfa ayarları ----
st.set_page_config(page_title="HitCapsule", page_icon="🎵", layout="wide")

# ---- Tabs: underline style (no pill bar) ----
st.markdown("""
<style>
/* bar gibi görünen büyük arka planı tamamen kaldır */
.stTabs [data-baseweb="tab-list"]{
  background: transparent !important;
  border: 0 !important;
  box-shadow: none !important;
  padding: 0 !important;
  gap: 0 !important;
}

/* sekmeleri sade text gibi göster */
.stTabs [data-baseweb="tab"]{
  background: transparent !important;
  border: 0 !important;
  margin: 0 24px 0 0 !important;
  padding: 0 0 10px 0 !important;
}

/* label renkleri */
.stTabs [data-baseweb="tab"] p{
  font-weight: 600 !important;
  color: rgba(255,255,255,.65) !important;
  margin: 0 !important;
}

/* aktif olan sekme */
.stTabs [aria-selected="true"] p{
  color: #fff !important;
}

/* underline (tab-highlight) */
.stTabs [data-baseweb="tab-highlight"]{
  background-color: #22c55e !important;   /* istersen marka rengine çek */
  height: 3px !important;
  border-radius: 0 !important;
}
</style>
""", unsafe_allow_html=True)


st.title("HitCapsule — Pick a date. Press play.")
st.caption("Create a Spotify playlist from the Billboard Hot 100 of any date.")

# ---- İki kolon düzeni ----
left, right = st.columns([1, 1])

with left:
    with st.form("controls"):
        d = st.date_input("Pick a date", value=_date(1997, 3, 6))
        custom_name = st.text_input("Playlist name (optional)", "")
        market = st.selectbox("Market", ["US", "TR", "GB", "DE", "FR", "BR"], index=0)
        make_public = st.checkbox("Create as public", value=False)
        upload_cover = st.checkbox("Upload custom cover (requires extra Spotify scope)", value=False)
        submitted = st.form_submit_button("Create My Top 100")

    # Şık "Tip" kutusu
    st.markdown(
        """
        <div class="hc-callout">
            <b>💡 Tip:</b> <span class="hc-muted">
            Public seçerseniz liste herkes tarafından görülebilir.
            </span>
        </div>
        """,
        unsafe_allow_html=True,
    )

def _store_result(**kwargs):
    st.session_state["result"] = kwargs

# ---- İş akışı ----
if submitted:
    the_date = d.strftime("%Y-%m-%d")
    start = time.perf_counter()

    status = st.empty()
    bar = st.progress(0, text="Starting…")

    status.write("Fetching Billboard Hot 100…")
    chart = fetch_hot100(the_date)
    year = the_date.split("-")[0]

    status.write("Connecting to Spotify…")
    sp = SpotifyClient(market=market, enable_cover_upload=upload_cover)

    uris, missing = [], []
    total = max(len(chart), 1)
    for i, e in enumerate(chart, start=1):
        uri = sp.search_best_track(e.title, e.artist, year)
        (uris if uri else missing).append(uri or e)
        pct = int(round(i * 100 / total))
        bar.progress(pct, text=f"Matching tracks… {i}/{total}")

    status.write("Creating playlist & adding tracks…")
    name = (custom_name or f"{the_date} Billboard Hot 100").strip()
    desc = f"Billboard Hot 100 - {the_date}. Generated by hitcapsule."
    pid = sp.create_playlist(name, public=make_public, description=desc)
    sp.add_items_chunked(pid, [u for u in uris if isinstance(u, str)])
    url = sp.get_playlist_url(pid)

    status.write("Rendering poster/cover…")
    os.makedirs("artifacts", exist_ok=True)
    cover_path = os.path.join("artifacts", f"cover_{the_date}.jpg")
    poster_path = os.path.join("artifacts", f"poster_{the_date}.png")
    make_cover(the_date, cover_path, playlist_name=name)
    # Top 8 + playlist adını postere geçir
    top8 = [(c.title, c.artist) for c in chart[:8]]
    make_story_poster(the_date, top8, url, poster_path, playlist_name=name, top_k=8)
    uploaded = False
    if upload_cover:
        uploaded = sp.upload_cover_image(pid, cover_path)

    duration = time.perf_counter() - start
    _store_result(
        date=the_date, name=name, url=url,
        added=len([u for u in uris if isinstance(u, str)]),
        missing=len(missing), duration=duration,
        poster_path=poster_path, cover_path=cover_path, uploaded=uploaded,
        done=True,
    )

    # Alt kısımda geniş yeşil bar istemiyoruz:
    status.empty()
    bar.empty()

# ---- Sağ kolon: Sekmeli sonuç kartı + küçük poster önizleme ----
with right:
    res = st.session_state.get("result")
    if not res:
        st.markdown(
            '<div class="hc-card"><b>Ready when you are.</b><br>'
            '<span class="hc-muted">Pick a date and hit “Create My Top 100”.</span></div>',
            unsafe_allow_html=True,
        )
    else:
        st.markdown('<div class="hc-card">', unsafe_allow_html=True)

        tab_sum, tab_poster = st.tabs(["Summary", "Poster"])
        with tab_sum:
            # Üstte küçük "badge"ler (geniş yeşil bar yerine)
            badges = []
            if res.get("done"):
                badges.append("✅ Done")
            if res.get("uploaded"):
                badges.append("🟩 Cover uploaded")
            if badges:
                st.markdown(
                    "<div class='hc-badge'>" + " &nbsp;•&nbsp; ".join(badges) + "</div>",
                    unsafe_allow_html=True,
                )

            st.subheader(res["name"])
            st.caption(f'Billboard Hot 100 — {res["date"]}')
            st.link_button("Open on Spotify", res["url"])

            m1, m2, m3 = st.columns(3)
            m1.metric("Added", res["added"])
            m2.metric("Missing", res["missing"])
            m3.metric("Time", f"{res['duration']:.1f}s")

        with tab_poster:
            PREVIEW_W = 180  # küçük poster önizleme
            st.image(res["poster_path"], caption=f"Poster preview ({PREVIEW_W}px)", width=PREVIEW_W)
            with open(res["poster_path"], "rb") as f:
                st.download_button("Download poster.png", f, file_name=os.path.basename(res["poster_path"]))
            with st.expander("View full-size poster"):
                # deprecation fix: use_container_width -> width='stretch'
                st.image(res["poster_path"], width="stretch")

        st.markdown('</div>', unsafe_allow_html=True)
