import os, sys
from datetime import date as _date

# src yolunu ekle ki import √ßalƒ±≈üsƒ±n
BASE = os.path.dirname(__file__)
SRC = os.path.join(BASE, "src")
if SRC not in sys.path:
    sys.path.insert(0, SRC)

import streamlit as st
from hitcapsule.billboard import fetch_hot100
from hitcapsule.spotify_client import SpotifyClient
from hitcapsule.artwork import make_cover, make_story_poster

st.set_page_config(page_title="HitCapsule", page_icon="üéµ", layout="centered")

st.title("HitCapsule ‚Äî Pick a date. Press play.")
st.caption("Create a Spotify playlist from the Billboard Hot 100 of any date.")

# --- Form ---
with st.form("controls"):
    d = st.date_input("Pick a date", value=_date(1997, 3, 6))
    custom_name = st.text_input("Playlist name (optional)", "")
    market = st.selectbox("Market", ["US", "TR", "GB", "DE", "FR", "BR"], index=0)
    make_public = st.checkbox("Create as public", value=False)
    upload_cover = st.checkbox("Upload custom cover (requires extra Spotify scope)", value=False)
    submitted = st.form_submit_button("Create My Top 100")

if submitted:
    the_date = d.strftime("%Y-%m-%d")
    with st.spinner("Fetching chart and creating your playlist..."):
        # 1) Billboard
        chart = fetch_hot100(the_date)
        year = the_date.split("-")[0]

        # 2) Spotify client (market & cover scope)
        sp = SpotifyClient(market=market, enable_cover_upload=upload_cover)

        # 3) E≈üle≈ütir
        uris, missing = [], []
        for e in chart:
            uri = sp.search_best_track(e.title, e.artist, year)
            if uri: uris.append(uri)
            else:   missing.append(e)

        # 4) Playlist
        name = custom_name.strip() or f"{the_date} Billboard Hot 100"
        desc = f"Billboard Hot 100 - {the_date}. Generated by hitcapsule."
        pid = sp.create_playlist(name, public=make_public, description=desc)
        sp.add_items_chunked(pid, uris)
        url = sp.get_playlist_url(pid)

        # 5) G√∂rseller
        os.makedirs("artifacts", exist_ok=True)
        cover_path = os.path.join("artifacts", f"cover_{the_date}.jpg")
        poster_path = os.path.join("artifacts", f"poster_{the_date}.png")
        make_cover(the_date, cover_path)
        top5 = [(c.title, c.artist) for c in chart[:5]]
        make_story_poster(the_date, top5, url, poster_path)

        uploaded = False
        if upload_cover:
            uploaded = sp.upload_cover_image(pid, cover_path)

    st.success(f"Playlist created: **{name}**")
    st.link_button("Open on Spotify", url)
    st.write(f"Added **{len(uris)}** tracks. Missing **{len(missing)}**.")

    st.subheader("Share")
    st.image(poster_path, caption="Story Poster (1080x1920)")
    with open(poster_path, "rb") as f:
        st.download_button("Download poster.png", f, file_name=os.path.basename(poster_path))
    if upload_cover:
        st.info("Cover upload: " + ("‚úÖ uploaded" if uploaded else "‚ö†Ô∏è failed (check scope ugc-image-upload)"))
    else:
        st.caption("Tip: Enable 'Upload custom cover' for automatic playlist cover (requires re-auth).")
